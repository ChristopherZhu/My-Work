public class Exercise207Fractions implements Comparable
{
	private int numerator, denominator;
	
	public Exercise207Fractions()
	{
		this(1,1); // default values not 0/0 since divide by 0 error
	}
	
	public Exercise207Fractions(int n, int d)
	{
		numerator = n;
		denominator = d;
	}
	
	public int getNumerator()
	{
		return numerator;
	}
	
	public int getDenominator()
	{
		return denominator;
	}
	
	public void setNumerator(int n)
	{
		numerator = n;
	}
	
	public void setDenominator(int d)
	{
		denominator = d;
	}
	
	public static Exercise207Fractions multiply (Exercise207Fractions f1, Exercise207Fractions f2)
	{
		Exercise207Fractions result = new Exercise207Fractions();
		result.setNumerator((f1.getNumerator())*(f2.getNumerator()));
		result.setDenominator((f1.getDenominator())*(f2.getDenominator()));
		
		return result;  // does not reduce the fraction
	}
	
	/*
	public void multiply (Exercise207Fractions f)
	{
		this.setNumerator(numerator*(f.getNumerator()));
		this.setDenominator(denominator*(f.getDenominator()));
		
		reduce(this);
	}
	*/
	
	public static Exercise207Fractions divide (Exercise207Fractions f1, Exercise207Fractions f2)
	{	// dividing fractions is equal to multiplying by the reciprocal
		Exercise207Fractions result = new Exercise207Fractions();
		f2.reciprocal();
		
		result = Exercise207Fractions.multiply(f1, f2);
		
		f2.reciprocal(); // revert f2 to original
		
		return result;  // does not reduce the fraction
	}
	
	/*
	public void divide (Exercise207Fractions f)
	{
		f.reciprocal();
		
		this.setNumerator(numerator*(f.getNumerator()));
		this.setDenominator(denominator*(f.getDenominator()));
		
		f.reciprocal();
		
		reduce(this);
	}
	*/
	
	public static Exercise207Fractions add (Exercise207Fractions f1, Exercise207Fractions f2)
	{
		Exercise207Fractions result = new Exercise207Fractions();
		
		if(f1.getDenominator() == f2.getDenominator())
		{
			result.setNumerator((f1.getNumerator()+f2.getNumerator()));
			result.setDenominator(f1.getDenominator());
		}else
		{
			result.setNumerator( ((f1.getNumerator()*f2.getDenominator())+(f2.getNumerator()*f1.getDenominator())) );
			result.setDenominator((f1.getDenominator()*f2.getDenominator()));
		}
		
		return result;  // does not reduce the fraction
	}
	
	public static Exercise207Fractions subtract (Exercise207Fractions f1, Exercise207Fractions f2)
	{
		Exercise207Fractions result = new Exercise207Fractions();
		
		if(f1.getDenominator() == f2.getDenominator())
		{
			result.setNumerator((f1.getNumerator()-f2.getNumerator()));
			result.setDenominator(f1.getDenominator());
		}else
		{
			result.setNumerator( ((f1.getNumerator()*f2.getDenominator())-(f2.getNumerator()*f1.getDenominator())) );
			result.setDenominator((f1.getDenominator()*f2.getDenominator()));
		}
		
		return result; // does not reduce the fraction
	}
	
	public static Exercise207Fractions reciprocal (Exercise207Fractions f)
	{
		int temp = f.getNumerator();
		f.setNumerator(f.getDenominator());
		f.setDenominator(temp);
		
		return f;
	}
	
	public void reciprocal ()
	{
		int temp = this.getNumerator();
		numerator = this.getDenominator();
		denominator = temp;
	}
	
	public double toDouble()
	{
		double num = numerator;
		double den = denominator;
		
		return num/den;
	}
	
	public String toFraction()
	{
		return numerator+ "/" +denominator;
	}
	
	public String toString()
	{
		return "The numerator is " +numerator+ " and the denominator is " +denominator+ ".";
	}
	
	public boolean equals(Exercise207Fractions fraction)
	{
		Exercise207Fractions thisFraction = new Exercise207Fractions (numerator, denominator);
		System.out.print("Fraction 1: " +thisFraction.toFraction()+ " is equal to ");
		reduce(thisFraction);
		System.out.println(thisFraction.toFraction()+ ".");
		
		System.out.print("Fraction 2: " +fraction.toFraction()+ " is equal to ");
		reduce(fraction);
		System.out.println(fraction.toFraction()+ ".");
		
		if (thisFraction.getNumerator() == fraction.getNumerator() && thisFraction.getDenominator() == fraction.getDenominator())
		{
			return true;
		}else
		{
			return false;
		}
	}
	
	public int compareTo(Object o)
	{
		Exercise207Fractions other = (Exercise207Fractions) o; // casted the object as a fraction
		
		if (this.toDouble() < other.toDouble())
		{
			return -1;
		}else if (this.toDouble() > other.toDouble())
		{
			return 1;
		}else // they are equal
		{
			return 0;
		}
	}
	
	public void reduce (Exercise207Fractions f) // would be private void reduce method
	{		// have parameters take both f1 and f2, and do the -1 sign swapping here
		if((f.getNumerator() <0 && f.getDenominator() <0) || (f.getNumerator() >0 && f.getDenominator() <0))
		{	// num and denom is negative
			numerator = f.getNumerator()*-1;
			denominator = f.getDenominator()*-1;
		}
		
		if (f.getNumerator() == 0 || f.getDenominator() == 0)
		{
			numerator = 0;
			denominator = 1;
		}else
		{
			int LCD = f.getDenominator(); // LCD = lowest common denominator
			
			for (int i = 2; i<= LCD; i++) // skips 1 to check
			{
				if (f.getNumerator()%i == 0 && f.getDenominator()%i == 0)
				{	// evenly divides both
					numerator = f.getNumerator()/i;
					denominator = f.getDenominator()/i;
					
					i = 1; // will add 1 via i++ after so i = 2
					LCD = denominator;
				}
			}
		}
	}
}
